'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace leadCatcherV2
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LeadCatcherServiceSoap", [Namespace]:="https://leadcatcher.ubh.com/")>  _
    Partial Public Class LeadCatcherService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddLeadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLeadV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TestWS.My.MySettings.Default.TestWS_leadCatcherV2_LeadCatcherService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddLeadCompleted As AddLeadCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLeadV2Completed As AddLeadV2CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://leadcatcher.ubh.com/AddLead", RequestNamespace:="https://leadcatcher.ubh.com/", ResponseNamespace:="https://leadcatcher.ubh.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLead(ByVal firstName As String, ByVal lastName As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal email As String, ByVal phoneNumber As String, ByVal officeCode As String, ByVal details As String, ByVal brochure As String, ByVal keyString As String) As String
            Dim results() As Object = Me.Invoke("AddLead", New Object() {firstName, lastName, address, city, state, zip, email, phoneNumber, officeCode, details, brochure, keyString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLeadAsync(ByVal firstName As String, ByVal lastName As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal email As String, ByVal phoneNumber As String, ByVal officeCode As String, ByVal details As String, ByVal brochure As String, ByVal keyString As String)
            Me.AddLeadAsync(firstName, lastName, address, city, state, zip, email, phoneNumber, officeCode, details, brochure, keyString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLeadAsync(ByVal firstName As String, ByVal lastName As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal email As String, ByVal phoneNumber As String, ByVal officeCode As String, ByVal details As String, ByVal brochure As String, ByVal keyString As String, ByVal userState As Object)
            If (Me.AddLeadOperationCompleted Is Nothing) Then
                Me.AddLeadOperationCompleted = AddressOf Me.OnAddLeadOperationCompleted
            End If
            Me.InvokeAsync("AddLead", New Object() {firstName, lastName, address, city, state, zip, email, phoneNumber, officeCode, details, brochure, keyString}, Me.AddLeadOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLeadOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLeadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLeadCompleted(Me, New AddLeadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://leadcatcher.ubh.com/AddLeadV2", RequestNamespace:="https://leadcatcher.ubh.com/", ResponseNamespace:="https://leadcatcher.ubh.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLeadV2(ByVal firstName As String, ByVal lastName As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal email As String, ByVal phoneNumber As String, ByVal officeCode As String, ByVal details As String, ByVal brochure As String, ByVal keyString As String, ByVal optOut As String) As String
            Dim results() As Object = Me.Invoke("AddLeadV2", New Object() {firstName, lastName, address, city, state, zip, email, phoneNumber, officeCode, details, brochure, keyString, optOut})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLeadV2Async(ByVal firstName As String, ByVal lastName As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal email As String, ByVal phoneNumber As String, ByVal officeCode As String, ByVal details As String, ByVal brochure As String, ByVal keyString As String, ByVal optOut As String)
            Me.AddLeadV2Async(firstName, lastName, address, city, state, zip, email, phoneNumber, officeCode, details, brochure, keyString, optOut, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLeadV2Async(ByVal firstName As String, ByVal lastName As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal email As String, ByVal phoneNumber As String, ByVal officeCode As String, ByVal details As String, ByVal brochure As String, ByVal keyString As String, ByVal optOut As String, ByVal userState As Object)
            If (Me.AddLeadV2OperationCompleted Is Nothing) Then
                Me.AddLeadV2OperationCompleted = AddressOf Me.OnAddLeadV2OperationCompleted
            End If
            Me.InvokeAsync("AddLeadV2", New Object() {firstName, lastName, address, city, state, zip, email, phoneNumber, officeCode, details, brochure, keyString, optOut}, Me.AddLeadV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLeadV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLeadV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLeadV2Completed(Me, New AddLeadV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddLeadCompletedEventHandler(ByVal sender As Object, ByVal e As AddLeadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLeadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddLeadV2CompletedEventHandler(ByVal sender As Object, ByVal e As AddLeadV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLeadV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
